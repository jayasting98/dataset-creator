[
    {
        "identifier": "CommandLineUiTest",
        "superclass": "",
        "interfaces": "",
        "line_start": 19,
        "col_start": 0,
        "line_end": 150,
        "col_end": 1,
        "fields": [],
        "argument_list": "",
        "methods": [
            {
                "identifier": "testRun_ioExceptionThrown_exitsGracefully",
                "parameters": "()",
                "modifiers": "@Test public",
                "return": "void",
                "line_start": 20,
                "col_start": 4,
                "line_end": 33,
                "col_end": 5,
                "body": "@Test\n    public void testRun_ioExceptionThrown_exitsGracefully() throws IOException {\n        BufferedReader mockBufferedReader = mock(BufferedReader.class);\n        when(mockBufferedReader.readLine()).thenThrow(IOException.class);\n        PrintStream mockOutputWriter = mock(PrintStream.class);\n        InOrder inOrder = inOrder(mockOutputWriter);\n        Logic mockLogic = mock(Logic.class);\n        when(mockLogic.isAbleToGuess()).thenReturn(true);\n        CommandLineUi clui = new CommandLineUi(mockBufferedReader, mockOutputWriter, mockLogic);\n        clui.run();\n        inOrder.verify(mockOutputWriter).println(\"Hello! I am thinking of a number from 1 to 100.\");\n        inOrder.verify(mockOutputWriter).println(\"Take a guess.\");\n        inOrder.verify(mockOutputWriter).println(\"An unexpected error was encountered. Exiting...\");\n    }",
                "class": "CommandLineUiTest",
                "signature": "void testRun_ioExceptionThrown_exitsGracefully()",
                "full_signature": "@Test public void testRun_ioExceptionThrown_exitsGracefully()",
                "class_method_signature": "CommandLineUiTest.testRun_ioExceptionThrown_exitsGracefully()",
                "testcase": true,
                "constructor": false,
                "invocations": [
                    "mock",
                    "thenThrow",
                    "when",
                    "readLine",
                    "mock",
                    "inOrder",
                    "mock",
                    "thenReturn",
                    "when",
                    "isAbleToGuess",
                    "run",
                    "println",
                    "verify",
                    "println",
                    "verify",
                    "println",
                    "verify"
                ]
            },
            {
                "identifier": "testRun_typicalWin_parsesProcessesAndInformsUserCorrectly",
                "parameters": "()",
                "modifiers": "@Test public",
                "return": "void",
                "line_start": 35,
                "col_start": 4,
                "line_end": 49,
                "col_end": 5,
                "body": "@Test\n    public void testRun_typicalWin_parsesProcessesAndInformsUserCorrectly() throws IOException {\n        BufferedReader mockBufferedReader = mock(BufferedReader.class);\n        when(mockBufferedReader.readLine()).thenReturn(\"42\");\n        PrintStream mockOutputWriter = mock(PrintStream.class);\n        InOrder inOrder = inOrder(mockOutputWriter);\n        Logic mockLogic = mock(Logic.class);\n        when(mockLogic.isAbleToGuess()).thenReturn(true).thenReturn(false);\n        when(mockLogic.getState()).thenReturn(GameState.CORRECT);\n        CommandLineUi clui = new CommandLineUi(mockBufferedReader, mockOutputWriter, mockLogic);\n        clui.run();\n        inOrder.verify(mockOutputWriter).println(\"Hello! I am thinking of a number from 1 to 100.\");\n        inOrder.verify(mockOutputWriter).println(\"Take a guess.\");\n        inOrder.verify(mockOutputWriter).println(\"Good job! You guessed my number.\");\n    }",
                "class": "CommandLineUiTest",
                "signature": "void testRun_typicalWin_parsesProcessesAndInformsUserCorrectly()",
                "full_signature": "@Test public void testRun_typicalWin_parsesProcessesAndInformsUserCorrectly()",
                "class_method_signature": "CommandLineUiTest.testRun_typicalWin_parsesProcessesAndInformsUserCorrectly()",
                "testcase": true,
                "constructor": false,
                "invocations": [
                    "mock",
                    "thenReturn",
                    "when",
                    "readLine",
                    "mock",
                    "inOrder",
                    "mock",
                    "thenReturn",
                    "thenReturn",
                    "when",
                    "isAbleToGuess",
                    "thenReturn",
                    "when",
                    "getState",
                    "run",
                    "println",
                    "verify",
                    "println",
                    "verify",
                    "println",
                    "verify"
                ]
            },
            {
                "identifier": "testParseGuess",
                "parameters": "()",
                "modifiers": "@Test public",
                "return": "void",
                "line_start": 51,
                "col_start": 4,
                "line_end": 64,
                "col_end": 5,
                "body": "@Test\n    public void testParseGuess() throws IOException {\n        BufferedReader mockBufferedReader = mock(BufferedReader.class);\n        when(mockBufferedReader.readLine()).thenReturn(\"not an integer\").thenReturn(\"42\");\n        PrintStream mockOutputWriter = mock(PrintStream.class);\n        InOrder inOrder = inOrder(mockOutputWriter);\n        CommandLineUi clui = new CommandLineUi(mockBufferedReader, mockOutputWriter, null);\n        int expectedGuessedNumber = 42;\n        int actualGuessedNumber = clui.parseGuess();\n        assertEquals(expectedGuessedNumber, actualGuessedNumber);\n        inOrder.verify(mockOutputWriter).println(\"Take a guess.\");\n        inOrder.verify(mockOutputWriter).println(\"Sorry, I did not understand that.\");\n        inOrder.verify(mockOutputWriter).println(\"Take a guess.\");\n    }",
                "class": "CommandLineUiTest",
                "signature": "void testParseGuess()",
                "full_signature": "@Test public void testParseGuess()",
                "class_method_signature": "CommandLineUiTest.testParseGuess()",
                "testcase": true,
                "constructor": false,
                "invocations": [
                    "mock",
                    "thenReturn",
                    "thenReturn",
                    "when",
                    "readLine",
                    "mock",
                    "inOrder",
                    "parseGuess",
                    "assertEquals",
                    "println",
                    "verify",
                    "println",
                    "verify",
                    "println",
                    "verify"
                ]
            },
            {
                "identifier": "testHandleState_startState_doesNotInformUser",
                "parameters": "()",
                "modifiers": "@Test public",
                "return": "void",
                "line_start": 66,
                "col_start": 4,
                "line_end": 72,
                "col_end": 5,
                "body": "@Test\n    public void testHandleState_startState_doesNotInformUser() {\n        PrintStream mockOutputWriter = mock(PrintStream.class);\n        CommandLineUi clui = new CommandLineUi(null, mockOutputWriter, null);\n        clui.handleState(GameState.START);\n        verifyNoInteractions(mockOutputWriter);\n    }",
                "class": "CommandLineUiTest",
                "signature": "void testHandleState_startState_doesNotInformUser()",
                "full_signature": "@Test public void testHandleState_startState_doesNotInformUser()",
                "class_method_signature": "CommandLineUiTest.testHandleState_startState_doesNotInformUser()",
                "testcase": true,
                "constructor": false,
                "invocations": [
                    "mock",
                    "handleState",
                    "verifyNoInteractions"
                ]
            },
            {
                "identifier": "testHandleState_overestimate_informsUser",
                "parameters": "()",
                "modifiers": "@Test public",
                "return": "void",
                "line_start": 74,
                "col_start": 4,
                "line_end": 81,
                "col_end": 5,
                "body": "@Test\n    public void testHandleState_overestimate_informsUser() {\n        PrintStream mockOutputWriter = mock(PrintStream.class);\n        CommandLineUi clui = new CommandLineUi(null, mockOutputWriter, null);\n        clui.handleState(GameState.OVERESTIMATE);\n        String expectedMessage = \"Your guess was too high. :(\";\n        verify(mockOutputWriter).println(expectedMessage);\n    }",
                "class": "CommandLineUiTest",
                "signature": "void testHandleState_overestimate_informsUser()",
                "full_signature": "@Test public void testHandleState_overestimate_informsUser()",
                "class_method_signature": "CommandLineUiTest.testHandleState_overestimate_informsUser()",
                "testcase": true,
                "constructor": false,
                "invocations": [
                    "mock",
                    "handleState",
                    "println",
                    "verify"
                ]
            },
            {
                "identifier": "testHandleState_underestimate_informsUser",
                "parameters": "()",
                "modifiers": "@Test public",
                "return": "void",
                "line_start": 83,
                "col_start": 4,
                "line_end": 90,
                "col_end": 5,
                "body": "@Test\n    public void testHandleState_underestimate_informsUser() {\n        PrintStream mockOutputWriter = mock(PrintStream.class);\n        CommandLineUi clui = new CommandLineUi(null, mockOutputWriter, null);\n        clui.handleState(GameState.UNDERESTIMATE);\n        String expectedMessage = \"Your guess was too low. :(\";\n        verify(mockOutputWriter).println(expectedMessage);\n    }",
                "class": "CommandLineUiTest",
                "signature": "void testHandleState_underestimate_informsUser()",
                "full_signature": "@Test public void testHandleState_underestimate_informsUser()",
                "class_method_signature": "CommandLineUiTest.testHandleState_underestimate_informsUser()",
                "testcase": true,
                "constructor": false,
                "invocations": [
                    "mock",
                    "handleState",
                    "println",
                    "verify"
                ]
            },
            {
                "identifier": "testHandleState_correctGuess_doesNotInformUser",
                "parameters": "()",
                "modifiers": "@Test public",
                "return": "void",
                "line_start": 92,
                "col_start": 4,
                "line_end": 98,
                "col_end": 5,
                "body": "@Test\n    public void testHandleState_correctGuess_doesNotInformUser() {\n        PrintStream mockOutputWriter = mock(PrintStream.class);\n        CommandLineUi clui = new CommandLineUi(null, mockOutputWriter, null);\n        clui.handleState(GameState.CORRECT);\n        verifyNoInteractions(mockOutputWriter);\n    }",
                "class": "CommandLineUiTest",
                "signature": "void testHandleState_correctGuess_doesNotInformUser()",
                "full_signature": "@Test public void testHandleState_correctGuess_doesNotInformUser()",
                "class_method_signature": "CommandLineUiTest.testHandleState_correctGuess_doesNotInformUser()",
                "testcase": true,
                "constructor": false,
                "invocations": [
                    "mock",
                    "handleState",
                    "verifyNoInteractions"
                ]
            },
            {
                "identifier": "testHandleEnd_startState_informsUserOfDefeat",
                "parameters": "()",
                "modifiers": "@Test public",
                "return": "void",
                "line_start": 100,
                "col_start": 4,
                "line_end": 109,
                "col_end": 5,
                "body": "@Test\n    public void testHandleEnd_startState_informsUserOfDefeat() {\n        PrintStream mockOutputWriter = mock(PrintStream.class);\n        Logic mockLogic = mock(Logic.class);\n        when(mockLogic.getNumberToGuess()).thenReturn(42);\n        CommandLineUi clui = new CommandLineUi(null, mockOutputWriter, mockLogic);\n        clui.handleEnd(GameState.START);\n        String expectedMessage = \"Sorry, you lose. The number was 42.\";\n        verify(mockOutputWriter).println(expectedMessage);\n    }",
                "class": "CommandLineUiTest",
                "signature": "void testHandleEnd_startState_informsUserOfDefeat()",
                "full_signature": "@Test public void testHandleEnd_startState_informsUserOfDefeat()",
                "class_method_signature": "CommandLineUiTest.testHandleEnd_startState_informsUserOfDefeat()",
                "testcase": true,
                "constructor": false,
                "invocations": [
                    "mock",
                    "mock",
                    "thenReturn",
                    "when",
                    "getNumberToGuess",
                    "handleEnd",
                    "println",
                    "verify"
                ]
            },
            {
                "identifier": "testHandleEnd_overestimate_informsUserOfDefeat",
                "parameters": "()",
                "modifiers": "@Test public",
                "return": "void",
                "line_start": 111,
                "col_start": 4,
                "line_end": 120,
                "col_end": 5,
                "body": "@Test\n    public void testHandleEnd_overestimate_informsUserOfDefeat() {\n        PrintStream mockOutputWriter = mock(PrintStream.class);\n        Logic mockLogic = mock(Logic.class);\n        when(mockLogic.getNumberToGuess()).thenReturn(42);\n        CommandLineUi clui = new CommandLineUi(null, mockOutputWriter, mockLogic);\n        clui.handleEnd(GameState.OVERESTIMATE);\n        String expectedMessage = \"Sorry, you lose. The number was 42.\";\n        verify(mockOutputWriter).println(expectedMessage);\n    }",
                "class": "CommandLineUiTest",
                "signature": "void testHandleEnd_overestimate_informsUserOfDefeat()",
                "full_signature": "@Test public void testHandleEnd_overestimate_informsUserOfDefeat()",
                "class_method_signature": "CommandLineUiTest.testHandleEnd_overestimate_informsUserOfDefeat()",
                "testcase": true,
                "constructor": false,
                "invocations": [
                    "mock",
                    "mock",
                    "thenReturn",
                    "when",
                    "getNumberToGuess",
                    "handleEnd",
                    "println",
                    "verify"
                ]
            },
            {
                "identifier": "testHandleEnd_underestimate_informsUserOfDefeat",
                "parameters": "()",
                "modifiers": "@Test public",
                "return": "void",
                "line_start": 122,
                "col_start": 4,
                "line_end": 131,
                "col_end": 5,
                "body": "@Test\n    public void testHandleEnd_underestimate_informsUserOfDefeat() {\n        PrintStream mockOutputWriter = mock(PrintStream.class);\n        Logic mockLogic = mock(Logic.class);\n        when(mockLogic.getNumberToGuess()).thenReturn(42);\n        CommandLineUi clui = new CommandLineUi(null, mockOutputWriter, mockLogic);\n        clui.handleEnd(GameState.UNDERESTIMATE);\n        String expectedMessage = \"Sorry, you lose. The number was 42.\";\n        verify(mockOutputWriter).println(expectedMessage);\n    }",
                "class": "CommandLineUiTest",
                "signature": "void testHandleEnd_underestimate_informsUserOfDefeat()",
                "full_signature": "@Test public void testHandleEnd_underestimate_informsUserOfDefeat()",
                "class_method_signature": "CommandLineUiTest.testHandleEnd_underestimate_informsUserOfDefeat()",
                "testcase": true,
                "constructor": false,
                "invocations": [
                    "mock",
                    "mock",
                    "thenReturn",
                    "when",
                    "getNumberToGuess",
                    "handleEnd",
                    "println",
                    "verify"
                ]
            },
            {
                "identifier": "testHandleEnd_correctGuess_informsUserOfWin",
                "parameters": "()",
                "modifiers": "@Test public",
                "return": "void",
                "line_start": 133,
                "col_start": 4,
                "line_end": 140,
                "col_end": 5,
                "body": "@Test\n    public void testHandleEnd_correctGuess_informsUserOfWin() {\n        PrintStream mockOutputWriter = mock(PrintStream.class);\n        CommandLineUi clui = new CommandLineUi(null, mockOutputWriter, null);\n        clui.handleEnd(GameState.CORRECT);\n        String expectedMessage = \"Good job! You guessed my number.\";\n        verify(mockOutputWriter).println(expectedMessage);\n    }",
                "class": "CommandLineUiTest",
                "signature": "void testHandleEnd_correctGuess_informsUserOfWin()",
                "full_signature": "@Test public void testHandleEnd_correctGuess_informsUserOfWin()",
                "class_method_signature": "CommandLineUiTest.testHandleEnd_correctGuess_informsUserOfWin()",
                "testcase": true,
                "constructor": false,
                "invocations": [
                    "mock",
                    "handleEnd",
                    "println",
                    "verify"
                ]
            },
            {
                "identifier": "testInformUser",
                "parameters": "()",
                "modifiers": "@Test public",
                "return": "void",
                "line_start": 142,
                "col_start": 4,
                "line_end": 149,
                "col_end": 5,
                "body": "@Test\n    public void testInformUser() {\n        PrintStream mockOutputWriter = mock(PrintStream.class);\n        CommandLineUi clui = new CommandLineUi(null, mockOutputWriter, null);\n        String expectedMessage = \"Hello, World!\";\n        clui.informUser(expectedMessage);\n        verify(mockOutputWriter).println(expectedMessage);\n    }",
                "class": "CommandLineUiTest",
                "signature": "void testInformUser()",
                "full_signature": "@Test public void testInformUser()",
                "class_method_signature": "CommandLineUiTest.testInformUser()",
                "testcase": true,
                "constructor": false,
                "invocations": [
                    "mock",
                    "informUser",
                    "println",
                    "verify"
                ]
            }
        ]
    }
]