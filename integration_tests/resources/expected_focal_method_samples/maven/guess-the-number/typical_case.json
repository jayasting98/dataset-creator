[
    {
        "focal_method": {
            "identifier": "run",
            "parameters": "()",
            "modifiers": "@Override public",
            "return": "void",
            "line_start": 29,
            "col_start": 4,
            "line_end": 46,
            "col_end": 5,
            "body": "@Override\n    public void run() {\n        GameState state = logic.getState();\n        informUser(OPENING_MESSAGE);\n        while (logic.isAbleToGuess()) {\n            int guessedNumber;\n            try {\n                guessedNumber = parseGuess();\n            } catch (IOException ioe) {\n                informUser(UNEXPECTED_ERROR_MESSAGE);\n                return;\n            }\n            logic.process(guessedNumber);\n            state = logic.getState();\n            handleState(state);\n        }\n        handleEnd(state);\n    }",
            "class": {
                "identifier": "CommandLineUi",
                "superclass": "",
                "interfaces": "implements UserInterface",
                "line_start": 9,
                "col_start": 0,
                "line_end": 89,
                "col_end": 1,
                "fields": [
                    {
                        "original_string": "private BufferedReader inputReader;",
                        "modifier": "private",
                        "type": "BufferedReader",
                        "declarator": "inputReader",
                        "var_name": "inputReader"
                    },
                    {
                        "original_string": "private PrintStream outputWriter;",
                        "modifier": "private",
                        "type": "PrintStream",
                        "declarator": "outputWriter",
                        "var_name": "outputWriter"
                    },
                    {
                        "original_string": "private Logic logic;",
                        "modifier": "private",
                        "type": "Logic",
                        "declarator": "logic",
                        "var_name": "logic"
                    },
                    {
                        "original_string": "static final String OPENING_MESSAGE = \"Hello! I am thinking of a number from 1 to 100.\";",
                        "modifier": "static final",
                        "type": "String",
                        "declarator": "OPENING_MESSAGE = \"Hello! I am thinking of a number from 1 to 100.\"",
                        "var_name": "OPENING_MESSAGE"
                    },
                    {
                        "original_string": "static final String TAKE_A_GUESS_MESSAGE = \"Take a guess.\";",
                        "modifier": "static final",
                        "type": "String",
                        "declarator": "TAKE_A_GUESS_MESSAGE = \"Take a guess.\"",
                        "var_name": "TAKE_A_GUESS_MESSAGE"
                    },
                    {
                        "original_string": "static final String PARSE_ERROR_MESSAGE = \"Sorry, I did not understand that.\";",
                        "modifier": "static final",
                        "type": "String",
                        "declarator": "PARSE_ERROR_MESSAGE = \"Sorry, I did not understand that.\"",
                        "var_name": "PARSE_ERROR_MESSAGE"
                    },
                    {
                        "original_string": "static final String UNEXPECTED_ERROR_MESSAGE = \"An unexpected error was encountered. Exiting...\";",
                        "modifier": "static final",
                        "type": "String",
                        "declarator": "UNEXPECTED_ERROR_MESSAGE = \"An unexpected error was encountered. Exiting...\"",
                        "var_name": "UNEXPECTED_ERROR_MESSAGE"
                    },
                    {
                        "original_string": "static final String OVERESTIMATE_MESSAGE = \"Your guess was too high. :(\";",
                        "modifier": "static final",
                        "type": "String",
                        "declarator": "OVERESTIMATE_MESSAGE = \"Your guess was too high. :(\"",
                        "var_name": "OVERESTIMATE_MESSAGE"
                    },
                    {
                        "original_string": "static final String UNDERESTIMATE_MESSAGE = \"Your guess was too low. :(\";",
                        "modifier": "static final",
                        "type": "String",
                        "declarator": "UNDERESTIMATE_MESSAGE = \"Your guess was too low. :(\"",
                        "var_name": "UNDERESTIMATE_MESSAGE"
                    },
                    {
                        "original_string": "static final String WIN_MESSAGE = \"Good job! You guessed my number.\";",
                        "modifier": "static final",
                        "type": "String",
                        "declarator": "WIN_MESSAGE = \"Good job! You guessed my number.\"",
                        "var_name": "WIN_MESSAGE"
                    },
                    {
                        "original_string": "static final String DEFEAT_TEMPLATE = \"Sorry, you lose. The number was %d.\";",
                        "modifier": "static final",
                        "type": "String",
                        "declarator": "DEFEAT_TEMPLATE = \"Sorry, you lose. The number was %d.\"",
                        "var_name": "DEFEAT_TEMPLATE"
                    }
                ],
                "methods": [
                    {
                        "identifier": "CommandLineUi",
                        "parameters": "(BufferedReader inputReader, PrintStream outputWriter, Logic logic)",
                        "modifiers": "public",
                        "return": "",
                        "line_start": 23,
                        "col_start": 4,
                        "line_end": 27,
                        "col_end": 5,
                        "body": "public CommandLineUi(BufferedReader inputReader, PrintStream outputWriter, Logic logic) {\n        this.inputReader = inputReader;\n        this.outputWriter = outputWriter;\n        this.logic = logic;\n    }",
                        "class": "CommandLineUi",
                        "signature": " CommandLineUi(BufferedReader inputReader, PrintStream outputWriter, Logic logic)",
                        "full_signature": "public  CommandLineUi(BufferedReader inputReader, PrintStream outputWriter, Logic logic)",
                        "class_method_signature": "CommandLineUi.CommandLineUi(BufferedReader inputReader, PrintStream outputWriter, Logic logic)",
                        "testcase": false,
                        "constructor": true,
                        "invocations": []
                    },
                    {
                        "identifier": "run",
                        "parameters": "()",
                        "modifiers": "@Override public",
                        "return": "void",
                        "line_start": 29,
                        "col_start": 4,
                        "line_end": 46,
                        "col_end": 5,
                        "body": "@Override\n    public void run() {\n        GameState state = logic.getState();\n        informUser(OPENING_MESSAGE);\n        while (logic.isAbleToGuess()) {\n            int guessedNumber;\n            try {\n                guessedNumber = parseGuess();\n            } catch (IOException ioe) {\n                informUser(UNEXPECTED_ERROR_MESSAGE);\n                return;\n            }\n            logic.process(guessedNumber);\n            state = logic.getState();\n            handleState(state);\n        }\n        handleEnd(state);\n    }",
                        "class": "CommandLineUi",
                        "signature": "void run()",
                        "full_signature": "@Override public void run()",
                        "class_method_signature": "CommandLineUi.run()",
                        "testcase": false,
                        "constructor": false,
                        "invocations": [
                            "getState",
                            "informUser",
                            "isAbleToGuess",
                            "parseGuess",
                            "informUser",
                            "process",
                            "getState",
                            "handleState",
                            "handleEnd"
                        ]
                    },
                    {
                        "identifier": "handleState",
                        "parameters": "(GameState state)",
                        "modifiers": "",
                        "return": "void",
                        "line_start": 48,
                        "col_start": 4,
                        "line_end": 61,
                        "col_end": 5,
                        "body": "void handleState(GameState state) {\n        String message;\n        switch (state) {\n            case OVERESTIMATE:\n                message = OVERESTIMATE_MESSAGE;\n                break;\n            case UNDERESTIMATE:\n                message = UNDERESTIMATE_MESSAGE;\n                break;\n            default:\n                return;\n        }\n        informUser(message);\n    }",
                        "class": "CommandLineUi",
                        "signature": "void handleState(GameState state)",
                        "full_signature": " void handleState(GameState state)",
                        "class_method_signature": "CommandLineUi.handleState(GameState state)",
                        "testcase": false,
                        "constructor": false,
                        "invocations": [
                            "informUser"
                        ]
                    },
                    {
                        "identifier": "parseGuess",
                        "parameters": "()",
                        "modifiers": "",
                        "return": "int",
                        "line_start": 63,
                        "col_start": 4,
                        "line_end": 74,
                        "col_end": 5,
                        "body": "int parseGuess() throws IOException {\n        while (true) {\n            try {\n                informUser(TAKE_A_GUESS_MESSAGE);\n                String input = inputReader.readLine();\n                int guessedNumber = Integer.parseInt(input);\n                return guessedNumber;\n            } catch (NumberFormatException nfe) {\n                informUser(PARSE_ERROR_MESSAGE);\n            }\n        }\n    }",
                        "class": "CommandLineUi",
                        "signature": "int parseGuess()",
                        "full_signature": " int parseGuess()",
                        "class_method_signature": "CommandLineUi.parseGuess()",
                        "testcase": false,
                        "constructor": false,
                        "invocations": [
                            "informUser",
                            "readLine",
                            "parseInt",
                            "informUser"
                        ]
                    },
                    {
                        "identifier": "handleEnd",
                        "parameters": "(GameState state)",
                        "modifiers": "",
                        "return": "void",
                        "line_start": 76,
                        "col_start": 4,
                        "line_end": 84,
                        "col_end": 5,
                        "body": "void handleEnd(GameState state) {\n        if (state == GameState.CORRECT) {\n            informUser(WIN_MESSAGE);\n        } else {\n            int numberToGuess = logic.getNumberToGuess();\n            String defeatMessage = String.format(DEFEAT_TEMPLATE, numberToGuess);\n            informUser(defeatMessage);\n        }\n    }",
                        "class": "CommandLineUi",
                        "signature": "void handleEnd(GameState state)",
                        "full_signature": " void handleEnd(GameState state)",
                        "class_method_signature": "CommandLineUi.handleEnd(GameState state)",
                        "testcase": false,
                        "constructor": false,
                        "invocations": [
                            "informUser",
                            "getNumberToGuess",
                            "format",
                            "informUser"
                        ]
                    },
                    {
                        "identifier": "informUser",
                        "parameters": "(String message)",
                        "modifiers": "",
                        "return": "void",
                        "line_start": 86,
                        "col_start": 4,
                        "line_end": 88,
                        "col_end": 5,
                        "body": "void informUser(String message) {\n        outputWriter.println(message);\n    }",
                        "class": "CommandLineUi",
                        "signature": "void informUser(String message)",
                        "full_signature": " void informUser(String message)",
                        "class_method_signature": "CommandLineUi.informUser(String message)",
                        "testcase": false,
                        "constructor": false,
                        "invocations": [
                            "println"
                        ]
                    }
                ],
                "file": "src/main/java/com/example/guessthenumber/ui/CommandLineUi.java"
            },
            "signature": "void run()",
            "full_signature": "@Override public void run()",
            "class_method_signature": "CommandLineUi.run()",
            "testcase": false,
            "constructor": false,
            "invocations": [
                "getState",
                "informUser",
                "isAbleToGuess",
                "parseGuess",
                "informUser",
                "process",
                "getState",
                "handleState",
                "handleEnd"
            ]
        },
        "test_methods": [
            {
                "identifier": "testRun_ioExceptionThrown_exitsGracefully",
                "parameters": "()",
                "modifiers": "@Test public",
                "return": "void",
                "line_start": 20,
                "col_start": 4,
                "line_end": 33,
                "col_end": 5,
                "body": "@Test\n    public void testRun_ioExceptionThrown_exitsGracefully() throws IOException {\n        BufferedReader mockBufferedReader = mock(BufferedReader.class);\n        when(mockBufferedReader.readLine()).thenThrow(IOException.class);\n        PrintStream mockOutputWriter = mock(PrintStream.class);\n        InOrder inOrder = inOrder(mockOutputWriter);\n        Logic mockLogic = mock(Logic.class);\n        when(mockLogic.isAbleToGuess()).thenReturn(true);\n        CommandLineUi clui = new CommandLineUi(mockBufferedReader, mockOutputWriter, mockLogic);\n        clui.run();\n        inOrder.verify(mockOutputWriter).println(\"Hello! I am thinking of a number from 1 to 100.\");\n        inOrder.verify(mockOutputWriter).println(\"Take a guess.\");\n        inOrder.verify(mockOutputWriter).println(\"An unexpected error was encountered. Exiting...\");\n    }",
                "class": {
                    "identifier": "CommandLineUiTest",
                    "superclass": "",
                    "interfaces": "",
                    "line_start": 19,
                    "col_start": 0,
                    "line_end": 150,
                    "col_end": 1,
                    "fields": [],
                    "file": "src/test/java/com/example/guessthenumber/ui/CommandLineUiTest.java"
                },
                "signature": "void testRun_ioExceptionThrown_exitsGracefully()",
                "full_signature": "@Test public void testRun_ioExceptionThrown_exitsGracefully()",
                "class_method_signature": "CommandLineUiTest.testRun_ioExceptionThrown_exitsGracefully()",
                "testcase": true,
                "constructor": false,
                "invocations": [
                    "mock",
                    "thenThrow",
                    "when",
                    "readLine",
                    "mock",
                    "inOrder",
                    "mock",
                    "thenReturn",
                    "when",
                    "isAbleToGuess",
                    "run",
                    "println",
                    "verify",
                    "println",
                    "verify",
                    "println",
                    "verify"
                ]
            },
            {
                "identifier": "testRun_typicalWin_parsesProcessesAndInformsUserCorrectly",
                "parameters": "()",
                "modifiers": "@Test public",
                "return": "void",
                "line_start": 35,
                "col_start": 4,
                "line_end": 49,
                "col_end": 5,
                "body": "@Test\n    public void testRun_typicalWin_parsesProcessesAndInformsUserCorrectly() throws IOException {\n        BufferedReader mockBufferedReader = mock(BufferedReader.class);\n        when(mockBufferedReader.readLine()).thenReturn(\"42\");\n        PrintStream mockOutputWriter = mock(PrintStream.class);\n        InOrder inOrder = inOrder(mockOutputWriter);\n        Logic mockLogic = mock(Logic.class);\n        when(mockLogic.isAbleToGuess()).thenReturn(true).thenReturn(false);\n        when(mockLogic.getState()).thenReturn(GameState.CORRECT);\n        CommandLineUi clui = new CommandLineUi(mockBufferedReader, mockOutputWriter, mockLogic);\n        clui.run();\n        inOrder.verify(mockOutputWriter).println(\"Hello! I am thinking of a number from 1 to 100.\");\n        inOrder.verify(mockOutputWriter).println(\"Take a guess.\");\n        inOrder.verify(mockOutputWriter).println(\"Good job! You guessed my number.\");\n    }",
                "class": {
                    "identifier": "CommandLineUiTest",
                    "superclass": "",
                    "interfaces": "",
                    "line_start": 19,
                    "col_start": 0,
                    "line_end": 150,
                    "col_end": 1,
                    "fields": [],
                    "file": "src/test/java/com/example/guessthenumber/ui/CommandLineUiTest.java"
                },
                "signature": "void testRun_typicalWin_parsesProcessesAndInformsUserCorrectly()",
                "full_signature": "@Test public void testRun_typicalWin_parsesProcessesAndInformsUserCorrectly()",
                "class_method_signature": "CommandLineUiTest.testRun_typicalWin_parsesProcessesAndInformsUserCorrectly()",
                "testcase": true,
                "constructor": false,
                "invocations": [
                    "mock",
                    "thenReturn",
                    "when",
                    "readLine",
                    "mock",
                    "inOrder",
                    "mock",
                    "thenReturn",
                    "thenReturn",
                    "when",
                    "isAbleToGuess",
                    "thenReturn",
                    "when",
                    "getState",
                    "run",
                    "println",
                    "verify",
                    "println",
                    "verify",
                    "println",
                    "verify"
                ]
            }
        ]
    },
    {
        "focal_method": {
            "identifier": "parseGuess",
            "parameters": "()",
            "modifiers": "",
            "return": "int",
            "line_start": 63,
            "col_start": 4,
            "line_end": 74,
            "col_end": 5,
            "body": "int parseGuess() throws IOException {\n        while (true) {\n            try {\n                informUser(TAKE_A_GUESS_MESSAGE);\n                String input = inputReader.readLine();\n                int guessedNumber = Integer.parseInt(input);\n                return guessedNumber;\n            } catch (NumberFormatException nfe) {\n                informUser(PARSE_ERROR_MESSAGE);\n            }\n        }\n    }",
            "class": {
                "identifier": "CommandLineUi",
                "superclass": "",
                "interfaces": "implements UserInterface",
                "line_start": 9,
                "col_start": 0,
                "line_end": 89,
                "col_end": 1,
                "fields": [
                    {
                        "original_string": "private BufferedReader inputReader;",
                        "modifier": "private",
                        "type": "BufferedReader",
                        "declarator": "inputReader",
                        "var_name": "inputReader"
                    },
                    {
                        "original_string": "private PrintStream outputWriter;",
                        "modifier": "private",
                        "type": "PrintStream",
                        "declarator": "outputWriter",
                        "var_name": "outputWriter"
                    },
                    {
                        "original_string": "private Logic logic;",
                        "modifier": "private",
                        "type": "Logic",
                        "declarator": "logic",
                        "var_name": "logic"
                    },
                    {
                        "original_string": "static final String OPENING_MESSAGE = \"Hello! I am thinking of a number from 1 to 100.\";",
                        "modifier": "static final",
                        "type": "String",
                        "declarator": "OPENING_MESSAGE = \"Hello! I am thinking of a number from 1 to 100.\"",
                        "var_name": "OPENING_MESSAGE"
                    },
                    {
                        "original_string": "static final String TAKE_A_GUESS_MESSAGE = \"Take a guess.\";",
                        "modifier": "static final",
                        "type": "String",
                        "declarator": "TAKE_A_GUESS_MESSAGE = \"Take a guess.\"",
                        "var_name": "TAKE_A_GUESS_MESSAGE"
                    },
                    {
                        "original_string": "static final String PARSE_ERROR_MESSAGE = \"Sorry, I did not understand that.\";",
                        "modifier": "static final",
                        "type": "String",
                        "declarator": "PARSE_ERROR_MESSAGE = \"Sorry, I did not understand that.\"",
                        "var_name": "PARSE_ERROR_MESSAGE"
                    },
                    {
                        "original_string": "static final String UNEXPECTED_ERROR_MESSAGE = \"An unexpected error was encountered. Exiting...\";",
                        "modifier": "static final",
                        "type": "String",
                        "declarator": "UNEXPECTED_ERROR_MESSAGE = \"An unexpected error was encountered. Exiting...\"",
                        "var_name": "UNEXPECTED_ERROR_MESSAGE"
                    },
                    {
                        "original_string": "static final String OVERESTIMATE_MESSAGE = \"Your guess was too high. :(\";",
                        "modifier": "static final",
                        "type": "String",
                        "declarator": "OVERESTIMATE_MESSAGE = \"Your guess was too high. :(\"",
                        "var_name": "OVERESTIMATE_MESSAGE"
                    },
                    {
                        "original_string": "static final String UNDERESTIMATE_MESSAGE = \"Your guess was too low. :(\";",
                        "modifier": "static final",
                        "type": "String",
                        "declarator": "UNDERESTIMATE_MESSAGE = \"Your guess was too low. :(\"",
                        "var_name": "UNDERESTIMATE_MESSAGE"
                    },
                    {
                        "original_string": "static final String WIN_MESSAGE = \"Good job! You guessed my number.\";",
                        "modifier": "static final",
                        "type": "String",
                        "declarator": "WIN_MESSAGE = \"Good job! You guessed my number.\"",
                        "var_name": "WIN_MESSAGE"
                    },
                    {
                        "original_string": "static final String DEFEAT_TEMPLATE = \"Sorry, you lose. The number was %d.\";",
                        "modifier": "static final",
                        "type": "String",
                        "declarator": "DEFEAT_TEMPLATE = \"Sorry, you lose. The number was %d.\"",
                        "var_name": "DEFEAT_TEMPLATE"
                    }
                ],
                "methods": [
                    {
                        "identifier": "CommandLineUi",
                        "parameters": "(BufferedReader inputReader, PrintStream outputWriter, Logic logic)",
                        "modifiers": "public",
                        "return": "",
                        "line_start": 23,
                        "col_start": 4,
                        "line_end": 27,
                        "col_end": 5,
                        "body": "public CommandLineUi(BufferedReader inputReader, PrintStream outputWriter, Logic logic) {\n        this.inputReader = inputReader;\n        this.outputWriter = outputWriter;\n        this.logic = logic;\n    }",
                        "class": "CommandLineUi",
                        "signature": " CommandLineUi(BufferedReader inputReader, PrintStream outputWriter, Logic logic)",
                        "full_signature": "public  CommandLineUi(BufferedReader inputReader, PrintStream outputWriter, Logic logic)",
                        "class_method_signature": "CommandLineUi.CommandLineUi(BufferedReader inputReader, PrintStream outputWriter, Logic logic)",
                        "testcase": false,
                        "constructor": true,
                        "invocations": []
                    },
                    {
                        "identifier": "run",
                        "parameters": "()",
                        "modifiers": "@Override public",
                        "return": "void",
                        "line_start": 29,
                        "col_start": 4,
                        "line_end": 46,
                        "col_end": 5,
                        "body": "@Override\n    public void run() {\n        GameState state = logic.getState();\n        informUser(OPENING_MESSAGE);\n        while (logic.isAbleToGuess()) {\n            int guessedNumber;\n            try {\n                guessedNumber = parseGuess();\n            } catch (IOException ioe) {\n                informUser(UNEXPECTED_ERROR_MESSAGE);\n                return;\n            }\n            logic.process(guessedNumber);\n            state = logic.getState();\n            handleState(state);\n        }\n        handleEnd(state);\n    }",
                        "class": "CommandLineUi",
                        "signature": "void run()",
                        "full_signature": "@Override public void run()",
                        "class_method_signature": "CommandLineUi.run()",
                        "testcase": false,
                        "constructor": false,
                        "invocations": [
                            "getState",
                            "informUser",
                            "isAbleToGuess",
                            "parseGuess",
                            "informUser",
                            "process",
                            "getState",
                            "handleState",
                            "handleEnd"
                        ]
                    },
                    {
                        "identifier": "handleState",
                        "parameters": "(GameState state)",
                        "modifiers": "",
                        "return": "void",
                        "line_start": 48,
                        "col_start": 4,
                        "line_end": 61,
                        "col_end": 5,
                        "body": "void handleState(GameState state) {\n        String message;\n        switch (state) {\n            case OVERESTIMATE:\n                message = OVERESTIMATE_MESSAGE;\n                break;\n            case UNDERESTIMATE:\n                message = UNDERESTIMATE_MESSAGE;\n                break;\n            default:\n                return;\n        }\n        informUser(message);\n    }",
                        "class": "CommandLineUi",
                        "signature": "void handleState(GameState state)",
                        "full_signature": " void handleState(GameState state)",
                        "class_method_signature": "CommandLineUi.handleState(GameState state)",
                        "testcase": false,
                        "constructor": false,
                        "invocations": [
                            "informUser"
                        ]
                    },
                    {
                        "identifier": "parseGuess",
                        "parameters": "()",
                        "modifiers": "",
                        "return": "int",
                        "line_start": 63,
                        "col_start": 4,
                        "line_end": 74,
                        "col_end": 5,
                        "body": "int parseGuess() throws IOException {\n        while (true) {\n            try {\n                informUser(TAKE_A_GUESS_MESSAGE);\n                String input = inputReader.readLine();\n                int guessedNumber = Integer.parseInt(input);\n                return guessedNumber;\n            } catch (NumberFormatException nfe) {\n                informUser(PARSE_ERROR_MESSAGE);\n            }\n        }\n    }",
                        "class": "CommandLineUi",
                        "signature": "int parseGuess()",
                        "full_signature": " int parseGuess()",
                        "class_method_signature": "CommandLineUi.parseGuess()",
                        "testcase": false,
                        "constructor": false,
                        "invocations": [
                            "informUser",
                            "readLine",
                            "parseInt",
                            "informUser"
                        ]
                    },
                    {
                        "identifier": "handleEnd",
                        "parameters": "(GameState state)",
                        "modifiers": "",
                        "return": "void",
                        "line_start": 76,
                        "col_start": 4,
                        "line_end": 84,
                        "col_end": 5,
                        "body": "void handleEnd(GameState state) {\n        if (state == GameState.CORRECT) {\n            informUser(WIN_MESSAGE);\n        } else {\n            int numberToGuess = logic.getNumberToGuess();\n            String defeatMessage = String.format(DEFEAT_TEMPLATE, numberToGuess);\n            informUser(defeatMessage);\n        }\n    }",
                        "class": "CommandLineUi",
                        "signature": "void handleEnd(GameState state)",
                        "full_signature": " void handleEnd(GameState state)",
                        "class_method_signature": "CommandLineUi.handleEnd(GameState state)",
                        "testcase": false,
                        "constructor": false,
                        "invocations": [
                            "informUser",
                            "getNumberToGuess",
                            "format",
                            "informUser"
                        ]
                    },
                    {
                        "identifier": "informUser",
                        "parameters": "(String message)",
                        "modifiers": "",
                        "return": "void",
                        "line_start": 86,
                        "col_start": 4,
                        "line_end": 88,
                        "col_end": 5,
                        "body": "void informUser(String message) {\n        outputWriter.println(message);\n    }",
                        "class": "CommandLineUi",
                        "signature": "void informUser(String message)",
                        "full_signature": " void informUser(String message)",
                        "class_method_signature": "CommandLineUi.informUser(String message)",
                        "testcase": false,
                        "constructor": false,
                        "invocations": [
                            "println"
                        ]
                    }
                ],
                "file": "src/main/java/com/example/guessthenumber/ui/CommandLineUi.java"
            },
            "signature": "int parseGuess()",
            "full_signature": " int parseGuess()",
            "class_method_signature": "CommandLineUi.parseGuess()",
            "testcase": false,
            "constructor": false,
            "invocations": [
                "informUser",
                "readLine",
                "parseInt",
                "informUser"
            ]
        },
        "test_methods": [
            {
                "identifier": "testParseGuess",
                "parameters": "()",
                "modifiers": "@Test public",
                "return": "void",
                "line_start": 51,
                "col_start": 4,
                "line_end": 64,
                "col_end": 5,
                "body": "@Test\n    public void testParseGuess() throws IOException {\n        BufferedReader mockBufferedReader = mock(BufferedReader.class);\n        when(mockBufferedReader.readLine()).thenReturn(\"not an integer\").thenReturn(\"42\");\n        PrintStream mockOutputWriter = mock(PrintStream.class);\n        InOrder inOrder = inOrder(mockOutputWriter);\n        CommandLineUi clui = new CommandLineUi(mockBufferedReader, mockOutputWriter, null);\n        int expectedGuessedNumber = 42;\n        int actualGuessedNumber = clui.parseGuess();\n        assertEquals(expectedGuessedNumber, actualGuessedNumber);\n        inOrder.verify(mockOutputWriter).println(\"Take a guess.\");\n        inOrder.verify(mockOutputWriter).println(\"Sorry, I did not understand that.\");\n        inOrder.verify(mockOutputWriter).println(\"Take a guess.\");\n    }",
                "class": {
                    "identifier": "CommandLineUiTest",
                    "superclass": "",
                    "interfaces": "",
                    "line_start": 19,
                    "col_start": 0,
                    "line_end": 150,
                    "col_end": 1,
                    "fields": [],
                    "file": "src/test/java/com/example/guessthenumber/ui/CommandLineUiTest.java"
                },
                "signature": "void testParseGuess()",
                "full_signature": "@Test public void testParseGuess()",
                "class_method_signature": "CommandLineUiTest.testParseGuess()",
                "testcase": true,
                "constructor": false,
                "invocations": [
                    "mock",
                    "thenReturn",
                    "thenReturn",
                    "when",
                    "readLine",
                    "mock",
                    "inOrder",
                    "parseGuess",
                    "assertEquals",
                    "println",
                    "verify",
                    "println",
                    "verify",
                    "println",
                    "verify"
                ]
            }
        ]
    },
    {
        "focal_method": {
            "identifier": "handleState",
            "parameters": "(GameState state)",
            "modifiers": "",
            "return": "void",
            "line_start": 48,
            "col_start": 4,
            "line_end": 61,
            "col_end": 5,
            "body": "void handleState(GameState state) {\n        String message;\n        switch (state) {\n            case OVERESTIMATE:\n                message = OVERESTIMATE_MESSAGE;\n                break;\n            case UNDERESTIMATE:\n                message = UNDERESTIMATE_MESSAGE;\n                break;\n            default:\n                return;\n        }\n        informUser(message);\n    }",
            "class": {
                "identifier": "CommandLineUi",
                "superclass": "",
                "interfaces": "implements UserInterface",
                "line_start": 9,
                "col_start": 0,
                "line_end": 89,
                "col_end": 1,
                "fields": [
                    {
                        "original_string": "private BufferedReader inputReader;",
                        "modifier": "private",
                        "type": "BufferedReader",
                        "declarator": "inputReader",
                        "var_name": "inputReader"
                    },
                    {
                        "original_string": "private PrintStream outputWriter;",
                        "modifier": "private",
                        "type": "PrintStream",
                        "declarator": "outputWriter",
                        "var_name": "outputWriter"
                    },
                    {
                        "original_string": "private Logic logic;",
                        "modifier": "private",
                        "type": "Logic",
                        "declarator": "logic",
                        "var_name": "logic"
                    },
                    {
                        "original_string": "static final String OPENING_MESSAGE = \"Hello! I am thinking of a number from 1 to 100.\";",
                        "modifier": "static final",
                        "type": "String",
                        "declarator": "OPENING_MESSAGE = \"Hello! I am thinking of a number from 1 to 100.\"",
                        "var_name": "OPENING_MESSAGE"
                    },
                    {
                        "original_string": "static final String TAKE_A_GUESS_MESSAGE = \"Take a guess.\";",
                        "modifier": "static final",
                        "type": "String",
                        "declarator": "TAKE_A_GUESS_MESSAGE = \"Take a guess.\"",
                        "var_name": "TAKE_A_GUESS_MESSAGE"
                    },
                    {
                        "original_string": "static final String PARSE_ERROR_MESSAGE = \"Sorry, I did not understand that.\";",
                        "modifier": "static final",
                        "type": "String",
                        "declarator": "PARSE_ERROR_MESSAGE = \"Sorry, I did not understand that.\"",
                        "var_name": "PARSE_ERROR_MESSAGE"
                    },
                    {
                        "original_string": "static final String UNEXPECTED_ERROR_MESSAGE = \"An unexpected error was encountered. Exiting...\";",
                        "modifier": "static final",
                        "type": "String",
                        "declarator": "UNEXPECTED_ERROR_MESSAGE = \"An unexpected error was encountered. Exiting...\"",
                        "var_name": "UNEXPECTED_ERROR_MESSAGE"
                    },
                    {
                        "original_string": "static final String OVERESTIMATE_MESSAGE = \"Your guess was too high. :(\";",
                        "modifier": "static final",
                        "type": "String",
                        "declarator": "OVERESTIMATE_MESSAGE = \"Your guess was too high. :(\"",
                        "var_name": "OVERESTIMATE_MESSAGE"
                    },
                    {
                        "original_string": "static final String UNDERESTIMATE_MESSAGE = \"Your guess was too low. :(\";",
                        "modifier": "static final",
                        "type": "String",
                        "declarator": "UNDERESTIMATE_MESSAGE = \"Your guess was too low. :(\"",
                        "var_name": "UNDERESTIMATE_MESSAGE"
                    },
                    {
                        "original_string": "static final String WIN_MESSAGE = \"Good job! You guessed my number.\";",
                        "modifier": "static final",
                        "type": "String",
                        "declarator": "WIN_MESSAGE = \"Good job! You guessed my number.\"",
                        "var_name": "WIN_MESSAGE"
                    },
                    {
                        "original_string": "static final String DEFEAT_TEMPLATE = \"Sorry, you lose. The number was %d.\";",
                        "modifier": "static final",
                        "type": "String",
                        "declarator": "DEFEAT_TEMPLATE = \"Sorry, you lose. The number was %d.\"",
                        "var_name": "DEFEAT_TEMPLATE"
                    }
                ],
                "methods": [
                    {
                        "identifier": "CommandLineUi",
                        "parameters": "(BufferedReader inputReader, PrintStream outputWriter, Logic logic)",
                        "modifiers": "public",
                        "return": "",
                        "line_start": 23,
                        "col_start": 4,
                        "line_end": 27,
                        "col_end": 5,
                        "body": "public CommandLineUi(BufferedReader inputReader, PrintStream outputWriter, Logic logic) {\n        this.inputReader = inputReader;\n        this.outputWriter = outputWriter;\n        this.logic = logic;\n    }",
                        "class": "CommandLineUi",
                        "signature": " CommandLineUi(BufferedReader inputReader, PrintStream outputWriter, Logic logic)",
                        "full_signature": "public  CommandLineUi(BufferedReader inputReader, PrintStream outputWriter, Logic logic)",
                        "class_method_signature": "CommandLineUi.CommandLineUi(BufferedReader inputReader, PrintStream outputWriter, Logic logic)",
                        "testcase": false,
                        "constructor": true,
                        "invocations": []
                    },
                    {
                        "identifier": "run",
                        "parameters": "()",
                        "modifiers": "@Override public",
                        "return": "void",
                        "line_start": 29,
                        "col_start": 4,
                        "line_end": 46,
                        "col_end": 5,
                        "body": "@Override\n    public void run() {\n        GameState state = logic.getState();\n        informUser(OPENING_MESSAGE);\n        while (logic.isAbleToGuess()) {\n            int guessedNumber;\n            try {\n                guessedNumber = parseGuess();\n            } catch (IOException ioe) {\n                informUser(UNEXPECTED_ERROR_MESSAGE);\n                return;\n            }\n            logic.process(guessedNumber);\n            state = logic.getState();\n            handleState(state);\n        }\n        handleEnd(state);\n    }",
                        "class": "CommandLineUi",
                        "signature": "void run()",
                        "full_signature": "@Override public void run()",
                        "class_method_signature": "CommandLineUi.run()",
                        "testcase": false,
                        "constructor": false,
                        "invocations": [
                            "getState",
                            "informUser",
                            "isAbleToGuess",
                            "parseGuess",
                            "informUser",
                            "process",
                            "getState",
                            "handleState",
                            "handleEnd"
                        ]
                    },
                    {
                        "identifier": "handleState",
                        "parameters": "(GameState state)",
                        "modifiers": "",
                        "return": "void",
                        "line_start": 48,
                        "col_start": 4,
                        "line_end": 61,
                        "col_end": 5,
                        "body": "void handleState(GameState state) {\n        String message;\n        switch (state) {\n            case OVERESTIMATE:\n                message = OVERESTIMATE_MESSAGE;\n                break;\n            case UNDERESTIMATE:\n                message = UNDERESTIMATE_MESSAGE;\n                break;\n            default:\n                return;\n        }\n        informUser(message);\n    }",
                        "class": "CommandLineUi",
                        "signature": "void handleState(GameState state)",
                        "full_signature": " void handleState(GameState state)",
                        "class_method_signature": "CommandLineUi.handleState(GameState state)",
                        "testcase": false,
                        "constructor": false,
                        "invocations": [
                            "informUser"
                        ]
                    },
                    {
                        "identifier": "parseGuess",
                        "parameters": "()",
                        "modifiers": "",
                        "return": "int",
                        "line_start": 63,
                        "col_start": 4,
                        "line_end": 74,
                        "col_end": 5,
                        "body": "int parseGuess() throws IOException {\n        while (true) {\n            try {\n                informUser(TAKE_A_GUESS_MESSAGE);\n                String input = inputReader.readLine();\n                int guessedNumber = Integer.parseInt(input);\n                return guessedNumber;\n            } catch (NumberFormatException nfe) {\n                informUser(PARSE_ERROR_MESSAGE);\n            }\n        }\n    }",
                        "class": "CommandLineUi",
                        "signature": "int parseGuess()",
                        "full_signature": " int parseGuess()",
                        "class_method_signature": "CommandLineUi.parseGuess()",
                        "testcase": false,
                        "constructor": false,
                        "invocations": [
                            "informUser",
                            "readLine",
                            "parseInt",
                            "informUser"
                        ]
                    },
                    {
                        "identifier": "handleEnd",
                        "parameters": "(GameState state)",
                        "modifiers": "",
                        "return": "void",
                        "line_start": 76,
                        "col_start": 4,
                        "line_end": 84,
                        "col_end": 5,
                        "body": "void handleEnd(GameState state) {\n        if (state == GameState.CORRECT) {\n            informUser(WIN_MESSAGE);\n        } else {\n            int numberToGuess = logic.getNumberToGuess();\n            String defeatMessage = String.format(DEFEAT_TEMPLATE, numberToGuess);\n            informUser(defeatMessage);\n        }\n    }",
                        "class": "CommandLineUi",
                        "signature": "void handleEnd(GameState state)",
                        "full_signature": " void handleEnd(GameState state)",
                        "class_method_signature": "CommandLineUi.handleEnd(GameState state)",
                        "testcase": false,
                        "constructor": false,
                        "invocations": [
                            "informUser",
                            "getNumberToGuess",
                            "format",
                            "informUser"
                        ]
                    },
                    {
                        "identifier": "informUser",
                        "parameters": "(String message)",
                        "modifiers": "",
                        "return": "void",
                        "line_start": 86,
                        "col_start": 4,
                        "line_end": 88,
                        "col_end": 5,
                        "body": "void informUser(String message) {\n        outputWriter.println(message);\n    }",
                        "class": "CommandLineUi",
                        "signature": "void informUser(String message)",
                        "full_signature": " void informUser(String message)",
                        "class_method_signature": "CommandLineUi.informUser(String message)",
                        "testcase": false,
                        "constructor": false,
                        "invocations": [
                            "println"
                        ]
                    }
                ],
                "file": "src/main/java/com/example/guessthenumber/ui/CommandLineUi.java"
            },
            "signature": "void handleState(GameState state)",
            "full_signature": " void handleState(GameState state)",
            "class_method_signature": "CommandLineUi.handleState(GameState state)",
            "testcase": false,
            "constructor": false,
            "invocations": [
                "informUser"
            ]
        },
        "test_methods": [
            {
                "identifier": "testHandleState_startState_doesNotInformUser",
                "parameters": "()",
                "modifiers": "@Test public",
                "return": "void",
                "line_start": 66,
                "col_start": 4,
                "line_end": 72,
                "col_end": 5,
                "body": "@Test\n    public void testHandleState_startState_doesNotInformUser() {\n        PrintStream mockOutputWriter = mock(PrintStream.class);\n        CommandLineUi clui = new CommandLineUi(null, mockOutputWriter, null);\n        clui.handleState(GameState.START);\n        verifyNoInteractions(mockOutputWriter);\n    }",
                "class": {
                    "identifier": "CommandLineUiTest",
                    "superclass": "",
                    "interfaces": "",
                    "line_start": 19,
                    "col_start": 0,
                    "line_end": 150,
                    "col_end": 1,
                    "fields": [],
                    "file": "src/test/java/com/example/guessthenumber/ui/CommandLineUiTest.java"
                },
                "signature": "void testHandleState_startState_doesNotInformUser()",
                "full_signature": "@Test public void testHandleState_startState_doesNotInformUser()",
                "class_method_signature": "CommandLineUiTest.testHandleState_startState_doesNotInformUser()",
                "testcase": true,
                "constructor": false,
                "invocations": [
                    "mock",
                    "handleState",
                    "verifyNoInteractions"
                ]
            },
            {
                "identifier": "testHandleState_overestimate_informsUser",
                "parameters": "()",
                "modifiers": "@Test public",
                "return": "void",
                "line_start": 74,
                "col_start": 4,
                "line_end": 81,
                "col_end": 5,
                "body": "@Test\n    public void testHandleState_overestimate_informsUser() {\n        PrintStream mockOutputWriter = mock(PrintStream.class);\n        CommandLineUi clui = new CommandLineUi(null, mockOutputWriter, null);\n        clui.handleState(GameState.OVERESTIMATE);\n        String expectedMessage = \"Your guess was too high. :(\";\n        verify(mockOutputWriter).println(expectedMessage);\n    }",
                "class": {
                    "identifier": "CommandLineUiTest",
                    "superclass": "",
                    "interfaces": "",
                    "line_start": 19,
                    "col_start": 0,
                    "line_end": 150,
                    "col_end": 1,
                    "fields": [],
                    "file": "src/test/java/com/example/guessthenumber/ui/CommandLineUiTest.java"
                },
                "signature": "void testHandleState_overestimate_informsUser()",
                "full_signature": "@Test public void testHandleState_overestimate_informsUser()",
                "class_method_signature": "CommandLineUiTest.testHandleState_overestimate_informsUser()",
                "testcase": true,
                "constructor": false,
                "invocations": [
                    "mock",
                    "handleState",
                    "println",
                    "verify"
                ]
            },
            {
                "identifier": "testHandleState_underestimate_informsUser",
                "parameters": "()",
                "modifiers": "@Test public",
                "return": "void",
                "line_start": 83,
                "col_start": 4,
                "line_end": 90,
                "col_end": 5,
                "body": "@Test\n    public void testHandleState_underestimate_informsUser() {\n        PrintStream mockOutputWriter = mock(PrintStream.class);\n        CommandLineUi clui = new CommandLineUi(null, mockOutputWriter, null);\n        clui.handleState(GameState.UNDERESTIMATE);\n        String expectedMessage = \"Your guess was too low. :(\";\n        verify(mockOutputWriter).println(expectedMessage);\n    }",
                "class": {
                    "identifier": "CommandLineUiTest",
                    "superclass": "",
                    "interfaces": "",
                    "line_start": 19,
                    "col_start": 0,
                    "line_end": 150,
                    "col_end": 1,
                    "fields": [],
                    "file": "src/test/java/com/example/guessthenumber/ui/CommandLineUiTest.java"
                },
                "signature": "void testHandleState_underestimate_informsUser()",
                "full_signature": "@Test public void testHandleState_underestimate_informsUser()",
                "class_method_signature": "CommandLineUiTest.testHandleState_underestimate_informsUser()",
                "testcase": true,
                "constructor": false,
                "invocations": [
                    "mock",
                    "handleState",
                    "println",
                    "verify"
                ]
            },
            {
                "identifier": "testHandleState_correctGuess_doesNotInformUser",
                "parameters": "()",
                "modifiers": "@Test public",
                "return": "void",
                "line_start": 92,
                "col_start": 4,
                "line_end": 98,
                "col_end": 5,
                "body": "@Test\n    public void testHandleState_correctGuess_doesNotInformUser() {\n        PrintStream mockOutputWriter = mock(PrintStream.class);\n        CommandLineUi clui = new CommandLineUi(null, mockOutputWriter, null);\n        clui.handleState(GameState.CORRECT);\n        verifyNoInteractions(mockOutputWriter);\n    }",
                "class": {
                    "identifier": "CommandLineUiTest",
                    "superclass": "",
                    "interfaces": "",
                    "line_start": 19,
                    "col_start": 0,
                    "line_end": 150,
                    "col_end": 1,
                    "fields": [],
                    "file": "src/test/java/com/example/guessthenumber/ui/CommandLineUiTest.java"
                },
                "signature": "void testHandleState_correctGuess_doesNotInformUser()",
                "full_signature": "@Test public void testHandleState_correctGuess_doesNotInformUser()",
                "class_method_signature": "CommandLineUiTest.testHandleState_correctGuess_doesNotInformUser()",
                "testcase": true,
                "constructor": false,
                "invocations": [
                    "mock",
                    "handleState",
                    "verifyNoInteractions"
                ]
            }
        ]
    },
    {
        "focal_method": {
            "identifier": "handleEnd",
            "parameters": "(GameState state)",
            "modifiers": "",
            "return": "void",
            "line_start": 76,
            "col_start": 4,
            "line_end": 84,
            "col_end": 5,
            "body": "void handleEnd(GameState state) {\n        if (state == GameState.CORRECT) {\n            informUser(WIN_MESSAGE);\n        } else {\n            int numberToGuess = logic.getNumberToGuess();\n            String defeatMessage = String.format(DEFEAT_TEMPLATE, numberToGuess);\n            informUser(defeatMessage);\n        }\n    }",
            "class": {
                "identifier": "CommandLineUi",
                "superclass": "",
                "interfaces": "implements UserInterface",
                "line_start": 9,
                "col_start": 0,
                "line_end": 89,
                "col_end": 1,
                "fields": [
                    {
                        "original_string": "private BufferedReader inputReader;",
                        "modifier": "private",
                        "type": "BufferedReader",
                        "declarator": "inputReader",
                        "var_name": "inputReader"
                    },
                    {
                        "original_string": "private PrintStream outputWriter;",
                        "modifier": "private",
                        "type": "PrintStream",
                        "declarator": "outputWriter",
                        "var_name": "outputWriter"
                    },
                    {
                        "original_string": "private Logic logic;",
                        "modifier": "private",
                        "type": "Logic",
                        "declarator": "logic",
                        "var_name": "logic"
                    },
                    {
                        "original_string": "static final String OPENING_MESSAGE = \"Hello! I am thinking of a number from 1 to 100.\";",
                        "modifier": "static final",
                        "type": "String",
                        "declarator": "OPENING_MESSAGE = \"Hello! I am thinking of a number from 1 to 100.\"",
                        "var_name": "OPENING_MESSAGE"
                    },
                    {
                        "original_string": "static final String TAKE_A_GUESS_MESSAGE = \"Take a guess.\";",
                        "modifier": "static final",
                        "type": "String",
                        "declarator": "TAKE_A_GUESS_MESSAGE = \"Take a guess.\"",
                        "var_name": "TAKE_A_GUESS_MESSAGE"
                    },
                    {
                        "original_string": "static final String PARSE_ERROR_MESSAGE = \"Sorry, I did not understand that.\";",
                        "modifier": "static final",
                        "type": "String",
                        "declarator": "PARSE_ERROR_MESSAGE = \"Sorry, I did not understand that.\"",
                        "var_name": "PARSE_ERROR_MESSAGE"
                    },
                    {
                        "original_string": "static final String UNEXPECTED_ERROR_MESSAGE = \"An unexpected error was encountered. Exiting...\";",
                        "modifier": "static final",
                        "type": "String",
                        "declarator": "UNEXPECTED_ERROR_MESSAGE = \"An unexpected error was encountered. Exiting...\"",
                        "var_name": "UNEXPECTED_ERROR_MESSAGE"
                    },
                    {
                        "original_string": "static final String OVERESTIMATE_MESSAGE = \"Your guess was too high. :(\";",
                        "modifier": "static final",
                        "type": "String",
                        "declarator": "OVERESTIMATE_MESSAGE = \"Your guess was too high. :(\"",
                        "var_name": "OVERESTIMATE_MESSAGE"
                    },
                    {
                        "original_string": "static final String UNDERESTIMATE_MESSAGE = \"Your guess was too low. :(\";",
                        "modifier": "static final",
                        "type": "String",
                        "declarator": "UNDERESTIMATE_MESSAGE = \"Your guess was too low. :(\"",
                        "var_name": "UNDERESTIMATE_MESSAGE"
                    },
                    {
                        "original_string": "static final String WIN_MESSAGE = \"Good job! You guessed my number.\";",
                        "modifier": "static final",
                        "type": "String",
                        "declarator": "WIN_MESSAGE = \"Good job! You guessed my number.\"",
                        "var_name": "WIN_MESSAGE"
                    },
                    {
                        "original_string": "static final String DEFEAT_TEMPLATE = \"Sorry, you lose. The number was %d.\";",
                        "modifier": "static final",
                        "type": "String",
                        "declarator": "DEFEAT_TEMPLATE = \"Sorry, you lose. The number was %d.\"",
                        "var_name": "DEFEAT_TEMPLATE"
                    }
                ],
                "methods": [
                    {
                        "identifier": "CommandLineUi",
                        "parameters": "(BufferedReader inputReader, PrintStream outputWriter, Logic logic)",
                        "modifiers": "public",
                        "return": "",
                        "line_start": 23,
                        "col_start": 4,
                        "line_end": 27,
                        "col_end": 5,
                        "body": "public CommandLineUi(BufferedReader inputReader, PrintStream outputWriter, Logic logic) {\n        this.inputReader = inputReader;\n        this.outputWriter = outputWriter;\n        this.logic = logic;\n    }",
                        "class": "CommandLineUi",
                        "signature": " CommandLineUi(BufferedReader inputReader, PrintStream outputWriter, Logic logic)",
                        "full_signature": "public  CommandLineUi(BufferedReader inputReader, PrintStream outputWriter, Logic logic)",
                        "class_method_signature": "CommandLineUi.CommandLineUi(BufferedReader inputReader, PrintStream outputWriter, Logic logic)",
                        "testcase": false,
                        "constructor": true,
                        "invocations": []
                    },
                    {
                        "identifier": "run",
                        "parameters": "()",
                        "modifiers": "@Override public",
                        "return": "void",
                        "line_start": 29,
                        "col_start": 4,
                        "line_end": 46,
                        "col_end": 5,
                        "body": "@Override\n    public void run() {\n        GameState state = logic.getState();\n        informUser(OPENING_MESSAGE);\n        while (logic.isAbleToGuess()) {\n            int guessedNumber;\n            try {\n                guessedNumber = parseGuess();\n            } catch (IOException ioe) {\n                informUser(UNEXPECTED_ERROR_MESSAGE);\n                return;\n            }\n            logic.process(guessedNumber);\n            state = logic.getState();\n            handleState(state);\n        }\n        handleEnd(state);\n    }",
                        "class": "CommandLineUi",
                        "signature": "void run()",
                        "full_signature": "@Override public void run()",
                        "class_method_signature": "CommandLineUi.run()",
                        "testcase": false,
                        "constructor": false,
                        "invocations": [
                            "getState",
                            "informUser",
                            "isAbleToGuess",
                            "parseGuess",
                            "informUser",
                            "process",
                            "getState",
                            "handleState",
                            "handleEnd"
                        ]
                    },
                    {
                        "identifier": "handleState",
                        "parameters": "(GameState state)",
                        "modifiers": "",
                        "return": "void",
                        "line_start": 48,
                        "col_start": 4,
                        "line_end": 61,
                        "col_end": 5,
                        "body": "void handleState(GameState state) {\n        String message;\n        switch (state) {\n            case OVERESTIMATE:\n                message = OVERESTIMATE_MESSAGE;\n                break;\n            case UNDERESTIMATE:\n                message = UNDERESTIMATE_MESSAGE;\n                break;\n            default:\n                return;\n        }\n        informUser(message);\n    }",
                        "class": "CommandLineUi",
                        "signature": "void handleState(GameState state)",
                        "full_signature": " void handleState(GameState state)",
                        "class_method_signature": "CommandLineUi.handleState(GameState state)",
                        "testcase": false,
                        "constructor": false,
                        "invocations": [
                            "informUser"
                        ]
                    },
                    {
                        "identifier": "parseGuess",
                        "parameters": "()",
                        "modifiers": "",
                        "return": "int",
                        "line_start": 63,
                        "col_start": 4,
                        "line_end": 74,
                        "col_end": 5,
                        "body": "int parseGuess() throws IOException {\n        while (true) {\n            try {\n                informUser(TAKE_A_GUESS_MESSAGE);\n                String input = inputReader.readLine();\n                int guessedNumber = Integer.parseInt(input);\n                return guessedNumber;\n            } catch (NumberFormatException nfe) {\n                informUser(PARSE_ERROR_MESSAGE);\n            }\n        }\n    }",
                        "class": "CommandLineUi",
                        "signature": "int parseGuess()",
                        "full_signature": " int parseGuess()",
                        "class_method_signature": "CommandLineUi.parseGuess()",
                        "testcase": false,
                        "constructor": false,
                        "invocations": [
                            "informUser",
                            "readLine",
                            "parseInt",
                            "informUser"
                        ]
                    },
                    {
                        "identifier": "handleEnd",
                        "parameters": "(GameState state)",
                        "modifiers": "",
                        "return": "void",
                        "line_start": 76,
                        "col_start": 4,
                        "line_end": 84,
                        "col_end": 5,
                        "body": "void handleEnd(GameState state) {\n        if (state == GameState.CORRECT) {\n            informUser(WIN_MESSAGE);\n        } else {\n            int numberToGuess = logic.getNumberToGuess();\n            String defeatMessage = String.format(DEFEAT_TEMPLATE, numberToGuess);\n            informUser(defeatMessage);\n        }\n    }",
                        "class": "CommandLineUi",
                        "signature": "void handleEnd(GameState state)",
                        "full_signature": " void handleEnd(GameState state)",
                        "class_method_signature": "CommandLineUi.handleEnd(GameState state)",
                        "testcase": false,
                        "constructor": false,
                        "invocations": [
                            "informUser",
                            "getNumberToGuess",
                            "format",
                            "informUser"
                        ]
                    },
                    {
                        "identifier": "informUser",
                        "parameters": "(String message)",
                        "modifiers": "",
                        "return": "void",
                        "line_start": 86,
                        "col_start": 4,
                        "line_end": 88,
                        "col_end": 5,
                        "body": "void informUser(String message) {\n        outputWriter.println(message);\n    }",
                        "class": "CommandLineUi",
                        "signature": "void informUser(String message)",
                        "full_signature": " void informUser(String message)",
                        "class_method_signature": "CommandLineUi.informUser(String message)",
                        "testcase": false,
                        "constructor": false,
                        "invocations": [
                            "println"
                        ]
                    }
                ],
                "file": "src/main/java/com/example/guessthenumber/ui/CommandLineUi.java"
            },
            "signature": "void handleEnd(GameState state)",
            "full_signature": " void handleEnd(GameState state)",
            "class_method_signature": "CommandLineUi.handleEnd(GameState state)",
            "testcase": false,
            "constructor": false,
            "invocations": [
                "informUser",
                "getNumberToGuess",
                "format",
                "informUser"
            ]
        },
        "test_methods": [
            {
                "identifier": "testHandleEnd_startState_informsUserOfDefeat",
                "parameters": "()",
                "modifiers": "@Test public",
                "return": "void",
                "line_start": 100,
                "col_start": 4,
                "line_end": 109,
                "col_end": 5,
                "body": "@Test\n    public void testHandleEnd_startState_informsUserOfDefeat() {\n        PrintStream mockOutputWriter = mock(PrintStream.class);\n        Logic mockLogic = mock(Logic.class);\n        when(mockLogic.getNumberToGuess()).thenReturn(42);\n        CommandLineUi clui = new CommandLineUi(null, mockOutputWriter, mockLogic);\n        clui.handleEnd(GameState.START);\n        String expectedMessage = \"Sorry, you lose. The number was 42.\";\n        verify(mockOutputWriter).println(expectedMessage);\n    }",
                "class": {
                    "identifier": "CommandLineUiTest",
                    "superclass": "",
                    "interfaces": "",
                    "line_start": 19,
                    "col_start": 0,
                    "line_end": 150,
                    "col_end": 1,
                    "fields": [],
                    "file": "src/test/java/com/example/guessthenumber/ui/CommandLineUiTest.java"
                },
                "signature": "void testHandleEnd_startState_informsUserOfDefeat()",
                "full_signature": "@Test public void testHandleEnd_startState_informsUserOfDefeat()",
                "class_method_signature": "CommandLineUiTest.testHandleEnd_startState_informsUserOfDefeat()",
                "testcase": true,
                "constructor": false,
                "invocations": [
                    "mock",
                    "mock",
                    "thenReturn",
                    "when",
                    "getNumberToGuess",
                    "handleEnd",
                    "println",
                    "verify"
                ]
            },
            {
                "identifier": "testHandleEnd_overestimate_informsUserOfDefeat",
                "parameters": "()",
                "modifiers": "@Test public",
                "return": "void",
                "line_start": 111,
                "col_start": 4,
                "line_end": 120,
                "col_end": 5,
                "body": "@Test\n    public void testHandleEnd_overestimate_informsUserOfDefeat() {\n        PrintStream mockOutputWriter = mock(PrintStream.class);\n        Logic mockLogic = mock(Logic.class);\n        when(mockLogic.getNumberToGuess()).thenReturn(42);\n        CommandLineUi clui = new CommandLineUi(null, mockOutputWriter, mockLogic);\n        clui.handleEnd(GameState.OVERESTIMATE);\n        String expectedMessage = \"Sorry, you lose. The number was 42.\";\n        verify(mockOutputWriter).println(expectedMessage);\n    }",
                "class": {
                    "identifier": "CommandLineUiTest",
                    "superclass": "",
                    "interfaces": "",
                    "line_start": 19,
                    "col_start": 0,
                    "line_end": 150,
                    "col_end": 1,
                    "fields": [],
                    "file": "src/test/java/com/example/guessthenumber/ui/CommandLineUiTest.java"
                },
                "signature": "void testHandleEnd_overestimate_informsUserOfDefeat()",
                "full_signature": "@Test public void testHandleEnd_overestimate_informsUserOfDefeat()",
                "class_method_signature": "CommandLineUiTest.testHandleEnd_overestimate_informsUserOfDefeat()",
                "testcase": true,
                "constructor": false,
                "invocations": [
                    "mock",
                    "mock",
                    "thenReturn",
                    "when",
                    "getNumberToGuess",
                    "handleEnd",
                    "println",
                    "verify"
                ]
            },
            {
                "identifier": "testHandleEnd_underestimate_informsUserOfDefeat",
                "parameters": "()",
                "modifiers": "@Test public",
                "return": "void",
                "line_start": 122,
                "col_start": 4,
                "line_end": 131,
                "col_end": 5,
                "body": "@Test\n    public void testHandleEnd_underestimate_informsUserOfDefeat() {\n        PrintStream mockOutputWriter = mock(PrintStream.class);\n        Logic mockLogic = mock(Logic.class);\n        when(mockLogic.getNumberToGuess()).thenReturn(42);\n        CommandLineUi clui = new CommandLineUi(null, mockOutputWriter, mockLogic);\n        clui.handleEnd(GameState.UNDERESTIMATE);\n        String expectedMessage = \"Sorry, you lose. The number was 42.\";\n        verify(mockOutputWriter).println(expectedMessage);\n    }",
                "class": {
                    "identifier": "CommandLineUiTest",
                    "superclass": "",
                    "interfaces": "",
                    "line_start": 19,
                    "col_start": 0,
                    "line_end": 150,
                    "col_end": 1,
                    "fields": [],
                    "file": "src/test/java/com/example/guessthenumber/ui/CommandLineUiTest.java"
                },
                "signature": "void testHandleEnd_underestimate_informsUserOfDefeat()",
                "full_signature": "@Test public void testHandleEnd_underestimate_informsUserOfDefeat()",
                "class_method_signature": "CommandLineUiTest.testHandleEnd_underestimate_informsUserOfDefeat()",
                "testcase": true,
                "constructor": false,
                "invocations": [
                    "mock",
                    "mock",
                    "thenReturn",
                    "when",
                    "getNumberToGuess",
                    "handleEnd",
                    "println",
                    "verify"
                ]
            },
            {
                "identifier": "testHandleEnd_correctGuess_informsUserOfWin",
                "parameters": "()",
                "modifiers": "@Test public",
                "return": "void",
                "line_start": 133,
                "col_start": 4,
                "line_end": 140,
                "col_end": 5,
                "body": "@Test\n    public void testHandleEnd_correctGuess_informsUserOfWin() {\n        PrintStream mockOutputWriter = mock(PrintStream.class);\n        CommandLineUi clui = new CommandLineUi(null, mockOutputWriter, null);\n        clui.handleEnd(GameState.CORRECT);\n        String expectedMessage = \"Good job! You guessed my number.\";\n        verify(mockOutputWriter).println(expectedMessage);\n    }",
                "class": {
                    "identifier": "CommandLineUiTest",
                    "superclass": "",
                    "interfaces": "",
                    "line_start": 19,
                    "col_start": 0,
                    "line_end": 150,
                    "col_end": 1,
                    "fields": [],
                    "file": "src/test/java/com/example/guessthenumber/ui/CommandLineUiTest.java"
                },
                "signature": "void testHandleEnd_correctGuess_informsUserOfWin()",
                "full_signature": "@Test public void testHandleEnd_correctGuess_informsUserOfWin()",
                "class_method_signature": "CommandLineUiTest.testHandleEnd_correctGuess_informsUserOfWin()",
                "testcase": true,
                "constructor": false,
                "invocations": [
                    "mock",
                    "handleEnd",
                    "println",
                    "verify"
                ]
            }
        ]
    },
    {
        "focal_method": {
            "identifier": "informUser",
            "parameters": "(String message)",
            "modifiers": "",
            "return": "void",
            "line_start": 86,
            "col_start": 4,
            "line_end": 88,
            "col_end": 5,
            "body": "void informUser(String message) {\n        outputWriter.println(message);\n    }",
            "class": {
                "identifier": "CommandLineUi",
                "superclass": "",
                "interfaces": "implements UserInterface",
                "line_start": 9,
                "col_start": 0,
                "line_end": 89,
                "col_end": 1,
                "fields": [
                    {
                        "original_string": "private BufferedReader inputReader;",
                        "modifier": "private",
                        "type": "BufferedReader",
                        "declarator": "inputReader",
                        "var_name": "inputReader"
                    },
                    {
                        "original_string": "private PrintStream outputWriter;",
                        "modifier": "private",
                        "type": "PrintStream",
                        "declarator": "outputWriter",
                        "var_name": "outputWriter"
                    },
                    {
                        "original_string": "private Logic logic;",
                        "modifier": "private",
                        "type": "Logic",
                        "declarator": "logic",
                        "var_name": "logic"
                    },
                    {
                        "original_string": "static final String OPENING_MESSAGE = \"Hello! I am thinking of a number from 1 to 100.\";",
                        "modifier": "static final",
                        "type": "String",
                        "declarator": "OPENING_MESSAGE = \"Hello! I am thinking of a number from 1 to 100.\"",
                        "var_name": "OPENING_MESSAGE"
                    },
                    {
                        "original_string": "static final String TAKE_A_GUESS_MESSAGE = \"Take a guess.\";",
                        "modifier": "static final",
                        "type": "String",
                        "declarator": "TAKE_A_GUESS_MESSAGE = \"Take a guess.\"",
                        "var_name": "TAKE_A_GUESS_MESSAGE"
                    },
                    {
                        "original_string": "static final String PARSE_ERROR_MESSAGE = \"Sorry, I did not understand that.\";",
                        "modifier": "static final",
                        "type": "String",
                        "declarator": "PARSE_ERROR_MESSAGE = \"Sorry, I did not understand that.\"",
                        "var_name": "PARSE_ERROR_MESSAGE"
                    },
                    {
                        "original_string": "static final String UNEXPECTED_ERROR_MESSAGE = \"An unexpected error was encountered. Exiting...\";",
                        "modifier": "static final",
                        "type": "String",
                        "declarator": "UNEXPECTED_ERROR_MESSAGE = \"An unexpected error was encountered. Exiting...\"",
                        "var_name": "UNEXPECTED_ERROR_MESSAGE"
                    },
                    {
                        "original_string": "static final String OVERESTIMATE_MESSAGE = \"Your guess was too high. :(\";",
                        "modifier": "static final",
                        "type": "String",
                        "declarator": "OVERESTIMATE_MESSAGE = \"Your guess was too high. :(\"",
                        "var_name": "OVERESTIMATE_MESSAGE"
                    },
                    {
                        "original_string": "static final String UNDERESTIMATE_MESSAGE = \"Your guess was too low. :(\";",
                        "modifier": "static final",
                        "type": "String",
                        "declarator": "UNDERESTIMATE_MESSAGE = \"Your guess was too low. :(\"",
                        "var_name": "UNDERESTIMATE_MESSAGE"
                    },
                    {
                        "original_string": "static final String WIN_MESSAGE = \"Good job! You guessed my number.\";",
                        "modifier": "static final",
                        "type": "String",
                        "declarator": "WIN_MESSAGE = \"Good job! You guessed my number.\"",
                        "var_name": "WIN_MESSAGE"
                    },
                    {
                        "original_string": "static final String DEFEAT_TEMPLATE = \"Sorry, you lose. The number was %d.\";",
                        "modifier": "static final",
                        "type": "String",
                        "declarator": "DEFEAT_TEMPLATE = \"Sorry, you lose. The number was %d.\"",
                        "var_name": "DEFEAT_TEMPLATE"
                    }
                ],
                "methods": [
                    {
                        "identifier": "CommandLineUi",
                        "parameters": "(BufferedReader inputReader, PrintStream outputWriter, Logic logic)",
                        "modifiers": "public",
                        "return": "",
                        "line_start": 23,
                        "col_start": 4,
                        "line_end": 27,
                        "col_end": 5,
                        "body": "public CommandLineUi(BufferedReader inputReader, PrintStream outputWriter, Logic logic) {\n        this.inputReader = inputReader;\n        this.outputWriter = outputWriter;\n        this.logic = logic;\n    }",
                        "class": "CommandLineUi",
                        "signature": " CommandLineUi(BufferedReader inputReader, PrintStream outputWriter, Logic logic)",
                        "full_signature": "public  CommandLineUi(BufferedReader inputReader, PrintStream outputWriter, Logic logic)",
                        "class_method_signature": "CommandLineUi.CommandLineUi(BufferedReader inputReader, PrintStream outputWriter, Logic logic)",
                        "testcase": false,
                        "constructor": true,
                        "invocations": []
                    },
                    {
                        "identifier": "run",
                        "parameters": "()",
                        "modifiers": "@Override public",
                        "return": "void",
                        "line_start": 29,
                        "col_start": 4,
                        "line_end": 46,
                        "col_end": 5,
                        "body": "@Override\n    public void run() {\n        GameState state = logic.getState();\n        informUser(OPENING_MESSAGE);\n        while (logic.isAbleToGuess()) {\n            int guessedNumber;\n            try {\n                guessedNumber = parseGuess();\n            } catch (IOException ioe) {\n                informUser(UNEXPECTED_ERROR_MESSAGE);\n                return;\n            }\n            logic.process(guessedNumber);\n            state = logic.getState();\n            handleState(state);\n        }\n        handleEnd(state);\n    }",
                        "class": "CommandLineUi",
                        "signature": "void run()",
                        "full_signature": "@Override public void run()",
                        "class_method_signature": "CommandLineUi.run()",
                        "testcase": false,
                        "constructor": false,
                        "invocations": [
                            "getState",
                            "informUser",
                            "isAbleToGuess",
                            "parseGuess",
                            "informUser",
                            "process",
                            "getState",
                            "handleState",
                            "handleEnd"
                        ]
                    },
                    {
                        "identifier": "handleState",
                        "parameters": "(GameState state)",
                        "modifiers": "",
                        "return": "void",
                        "line_start": 48,
                        "col_start": 4,
                        "line_end": 61,
                        "col_end": 5,
                        "body": "void handleState(GameState state) {\n        String message;\n        switch (state) {\n            case OVERESTIMATE:\n                message = OVERESTIMATE_MESSAGE;\n                break;\n            case UNDERESTIMATE:\n                message = UNDERESTIMATE_MESSAGE;\n                break;\n            default:\n                return;\n        }\n        informUser(message);\n    }",
                        "class": "CommandLineUi",
                        "signature": "void handleState(GameState state)",
                        "full_signature": " void handleState(GameState state)",
                        "class_method_signature": "CommandLineUi.handleState(GameState state)",
                        "testcase": false,
                        "constructor": false,
                        "invocations": [
                            "informUser"
                        ]
                    },
                    {
                        "identifier": "parseGuess",
                        "parameters": "()",
                        "modifiers": "",
                        "return": "int",
                        "line_start": 63,
                        "col_start": 4,
                        "line_end": 74,
                        "col_end": 5,
                        "body": "int parseGuess() throws IOException {\n        while (true) {\n            try {\n                informUser(TAKE_A_GUESS_MESSAGE);\n                String input = inputReader.readLine();\n                int guessedNumber = Integer.parseInt(input);\n                return guessedNumber;\n            } catch (NumberFormatException nfe) {\n                informUser(PARSE_ERROR_MESSAGE);\n            }\n        }\n    }",
                        "class": "CommandLineUi",
                        "signature": "int parseGuess()",
                        "full_signature": " int parseGuess()",
                        "class_method_signature": "CommandLineUi.parseGuess()",
                        "testcase": false,
                        "constructor": false,
                        "invocations": [
                            "informUser",
                            "readLine",
                            "parseInt",
                            "informUser"
                        ]
                    },
                    {
                        "identifier": "handleEnd",
                        "parameters": "(GameState state)",
                        "modifiers": "",
                        "return": "void",
                        "line_start": 76,
                        "col_start": 4,
                        "line_end": 84,
                        "col_end": 5,
                        "body": "void handleEnd(GameState state) {\n        if (state == GameState.CORRECT) {\n            informUser(WIN_MESSAGE);\n        } else {\n            int numberToGuess = logic.getNumberToGuess();\n            String defeatMessage = String.format(DEFEAT_TEMPLATE, numberToGuess);\n            informUser(defeatMessage);\n        }\n    }",
                        "class": "CommandLineUi",
                        "signature": "void handleEnd(GameState state)",
                        "full_signature": " void handleEnd(GameState state)",
                        "class_method_signature": "CommandLineUi.handleEnd(GameState state)",
                        "testcase": false,
                        "constructor": false,
                        "invocations": [
                            "informUser",
                            "getNumberToGuess",
                            "format",
                            "informUser"
                        ]
                    },
                    {
                        "identifier": "informUser",
                        "parameters": "(String message)",
                        "modifiers": "",
                        "return": "void",
                        "line_start": 86,
                        "col_start": 4,
                        "line_end": 88,
                        "col_end": 5,
                        "body": "void informUser(String message) {\n        outputWriter.println(message);\n    }",
                        "class": "CommandLineUi",
                        "signature": "void informUser(String message)",
                        "full_signature": " void informUser(String message)",
                        "class_method_signature": "CommandLineUi.informUser(String message)",
                        "testcase": false,
                        "constructor": false,
                        "invocations": [
                            "println"
                        ]
                    }
                ],
                "file": "src/main/java/com/example/guessthenumber/ui/CommandLineUi.java"
            },
            "signature": "void informUser(String message)",
            "full_signature": " void informUser(String message)",
            "class_method_signature": "CommandLineUi.informUser(String message)",
            "testcase": false,
            "constructor": false,
            "invocations": [
                "println"
            ]
        },
        "test_methods": [
            {
                "identifier": "testInformUser",
                "parameters": "()",
                "modifiers": "@Test public",
                "return": "void",
                "line_start": 142,
                "col_start": 4,
                "line_end": 149,
                "col_end": 5,
                "body": "@Test\n    public void testInformUser() {\n        PrintStream mockOutputWriter = mock(PrintStream.class);\n        CommandLineUi clui = new CommandLineUi(null, mockOutputWriter, null);\n        String expectedMessage = \"Hello, World!\";\n        clui.informUser(expectedMessage);\n        verify(mockOutputWriter).println(expectedMessage);\n    }",
                "class": {
                    "identifier": "CommandLineUiTest",
                    "superclass": "",
                    "interfaces": "",
                    "line_start": 19,
                    "col_start": 0,
                    "line_end": 150,
                    "col_end": 1,
                    "fields": [],
                    "file": "src/test/java/com/example/guessthenumber/ui/CommandLineUiTest.java"
                },
                "signature": "void testInformUser()",
                "full_signature": "@Test public void testInformUser()",
                "class_method_signature": "CommandLineUiTest.testInformUser()",
                "testcase": true,
                "constructor": false,
                "invocations": [
                    "mock",
                    "informUser",
                    "println",
                    "verify"
                ]
            }
        ]
    }
]